AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  DbConnectionString:
    Type: String
    NoEcho: true

Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SQS Api
      Body:
        openapi: 3.0.0
        info:
          title: API Gateway -> SQS API
          version: 1.0.0
        paths:
          /telemetry:
            post:
              operationId: createTelemetry
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Telemetry'
              responses:
                "200":
                  description: Event post successfully handled and placed to the queue
                "400":
                  description: Bad request
                "500":
                  description: Server Error
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayRole.Arn
                httpMethod: 'POST'
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${Queue.QueueName}'
                responses:
                  '2\d{2}':
                    statusCode: '200'
                  default:
                    statusCode: '500'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: "#set($dedupId = $context.requestId)\n#set($groupId = $input.json('$.car_id'))\nAction=SendMessage&MessageBody=$input.body&MessageGroupId=$groupId&MessageDeduplicationId=$dedupId"
                passthroughBehavior: 'never'
                type: 'aws'

        components:
          schemas:
            Telemetry:
              type: object
              required:
                - car_id
                - created_at
                - coordinates
              properties:
                car_id:
                  type: integer
                  format: int64
                  example: 123456789
                created_at:
                  type: number
                  description: Timestamp with milliseconds
                  example: 1693026444424
                  min: 1
                coordinates:
                  type: object
                  required:
                    - latitude
                    - longitude
                  properties:
                    latitude:
                      type: number
                      example: 45.175030
                    longitude:
                      type: number
                      example: 5.647733


  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway

  DemoStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: demo
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref Deployment

  SQSPushPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: sqs-push-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:SendMessage"
            Resource: !GetAtt Queue.Arn

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sqs-api-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref SQSPushPolicy


  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: car-telemetry.fifo
      FifoQueue: true
      VisibilityTimeout: 30
      ReceiveMessageWaitTimeSeconds: 20
      ContentBasedDeduplication: false

  LambdaConsumer:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      FunctionName: demo-sqs-consumer
      Handler: index-sqs.handler
      AutoPublishAlias: live
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs18.x
      CodeUri:
        Bucket: deployment.kinesis-demo
        Key: archive-v7.zip
      Events:
        Sqs:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 10
      Environment:
        Variables:
          DB_CONNECTION_STRING: !Ref DbConnectionString


  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt Queue.Arn

Outputs:
  ApiGatewayUrl:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DemoStage}/'
