AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  DbConnectionString:
    Type: String
    NoEcho: true

Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Kinesis API
      Body:
        openapi: 3.0.0
        info:
          title: API Gateway -> Kinesis API
          version: 1.0.0
        paths:
          /telemetry:
            post:
              operationId: createTelemetry
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Telemetry'
              responses:
                "200":
                  description: Event post successfully handled and placed to the stream
                "400":
                  description: Bad request
                "500":
                  description: Server Error
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiRole.Arn
                httpMethod: 'POST'
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecords'
                responses:
                  '2\d{2}':
                    statusCode: '200'
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        $input.json("$")
                        #if($inputRoot.toString().contains("ErrorMessage"))
                        #set($context.responseOverride.status = 500)
                        #end
                  default:
                    statusCode: '500'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: !Sub |
                    {
                    "StreamName": "${KinesisStream}",
                    "Records": [
                           {
                            "Data": "$util.base64Encode($input.body)",
                            "PartitionKey": "$input.json('$.car_id')"
                           }
                       ]
                    }
                passthroughBehavior: 'never'
                type: 'aws'

        components:
          schemas:
            Telemetry:
              type: object
              required:
                - car_id
                - created_at
                - coordinates
              properties:
                car_id:
                  type: integer
                  format: int64
                  example: 123456789
                created_at:
                  type: number
                  description: Timestamp with milliseconds
                  example: 1693026444424
                  min: 1
                coordinates:
                  type: object
                  required:
                    - latitude
                    - longitude
                  properties:
                    latitude:
                      type: number
                      example: 45.175030
                    longitude:
                      type: number
                      example: 5.647733


  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway

  DemoStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: demo
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref Deployment


  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      Name: 'demo-stream'

  LambdaConsumer:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      FunctionName: demo-kinesis-consumer
      Handler: index.handler
      AutoPublishAlias: live
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs18.x
      CodeUri:
        Bucket: deployment.kinesis-demo
        Key: archive-v3.zip
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisStream.Arn
            BatchSize: 100
            MaximumBatchingWindowInSeconds: 10
            StartingPosition: LATEST
      Environment:
        Variables:
          DB_CONNECTION_STRING: !Ref DbConnectionString


  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:ListShards
                  - kinesis:ListStreams
                  - kinesis:SubscribeToShard
                Resource: !GetAtt KinesisStream.Arn


  KinesisPutPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: kinesis-put-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "kinesis:PutRecord"
              - "kinesis:PutRecords"
            Resource:
              !GetAtt KinesisStream.Arn

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: kinesis-api-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref KinesisPutPolicy

Outputs:
  ApiGatewayUrl:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DemoStage}/'
